<?php
//------correct
$email[] = '123456@i.ru';
$email[] = '123456@ru.name.ru';
$email[] = 'login@i.ru';
$email[] = 'логин-1@i.ru';
$email[] = 'login.3@i.ru';
$email[] = 'login.3-67@i.ru';
$email[] = '1login@ru.name.ru';
//----- wrong
$email[] = '1login_@i.ru';		-
$email[] = '_login@i.ru';		-
$email[] = '_login@ru.name.ru';		-
$email[] = 'логинlogin@i.ru';		v
$email[] = 'loginлогин@i.ru';		v
$email[] = '.123456@i.ru';		-
$email[] = '123456-@i.ru';		-
$email[] = '@123456@i.ru';		v
$email[] = '123456@.ru';		v
$email[] = '123456@ru';			v
$email[] = 'login@.ru';			v
$email[] = '123456@ru.name.ru.ua';	-
$email[] = '123456@i.ру';		v
$email[] = '123456@ru.name.ру';		v

foreach ($email as $item) {
    if (1 == preg_match(
        '/^((([0-9A-Za-z]{1}[-0-9A-z\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\.]{1,}[0-9А-Яа-я]{1}))@([-0-9A-Za-z]{1,}\.){1,2}[-A-Za-z]{2,})$/u', $item) . '<br/>'){
        echo '"' . $item . '" : correct' . '<br/>';
    } else {
        echo '"' . $item . '" : non-correct' . '<br/>';
    }
}




требуемая маска выглядит вот так: preg_match('/^((([0-9A-Za-z]{1}[-0-9A-z\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\.]{1,}[0-9А-Яа-я]{1}))@([-A-Za-z]{1,}\.){1,2}[-A-Za-z]{2,})$/u', $item)



разложим маску более детально (обратите внимание что маска разбитая на абзацы не работает, это сделано для читаемости)

'/
^( - параметр что маска начинается с начала текста
    (
        (  - этот блок отвечает за логин латиницей
            [0-9A-Za-z]{1} - 1й символ только цифра или буква
            [-0-9A-z\.]{1,} - в середине минимум один символ (буква, цифра, _, -, .) (не менее 1 символа)
            [0-9A-Za-z]{1} - последний символ только цифра или буква
        )
        | - параметр "или/или" выбирает блок "латиница" или "кирилица"
        (  - этот блок отвечает за логин кирилицей
            [0-9А-Яа-я]{1} - 1й символ только цифра или буква
            [-0-9А-я\.]{1,} - в середине минимум один символ (буква, цифра, _, -, .) (не менее 1 символа)
            [0-9А-Яа-я]{1} - последний символ только цифра или буква
        )
    )
    @ - обазятельное наличие значка разделяющего логин от домена
    (
        [-0-9A-Za-z]{1,} - блок может состоять из "-", цифр и букв (не менее 1 символа)
        \. - наличие точки в конце блока
    ){1,2} - допускается от 1 до 2 блоков по вышеукащанной маске (mail. , ru.mail.)
    [-A-Za-z]{2,} - блок описывайющий домен вехнего уровня (ru, com, net, aero etc) (не менее 2 символов)
)$ - параметр что маска заканчивается в конце текста
/u - параметр позволяющий работать с кирилицей
'



Python:

import re

# Make a regular expression
# for validating an Email
regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

# Define a function for
# for validating an Email
def check(email):

	# pass the regular expression
	# and the string into the fullmatch() method
	if re.fullmatch(regex, email):
		print("Valid Email")

	else:
		print("Invalid Email")

# Driver Code
if __name__ == '__main__':

	# Enter the email
	email = "ankitrai326@gmail.com"

	# calling run function
	check(email)

	email = "my.ownsite@our-earth.org"
	check(email)

	email = "ankitrai326.com"
	check(email)






import re

regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'


def check(email):
    if (re.search(regex, email)):
        print("Valid Email")
    else:
        print("Invalid Email")


if __name__ == '__main__':
    email = "rohit.gupta@mcnsolutions.net"
    check(email)

    email = "praveen@c-sharpcorner.com"
    check(email)

    email = "inform2atul@gmail.com"
    check(email)

Чтобы понять код, вам нужно понять, что означает "^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2 ,3}$".
^ означает совпадение с началом строки, т. е. здесь он сообщает интерпретатору, что последовательность, следующая за ^, является форматом, на основе которого он должен решить, какой адрес электронной почты действителен, а какой нет.
[...] означает соответствие набору символов, а [a-z0-9] означает поиск последовательности/комбинации символов, которая содержит символы от маленькой буквы «а» до маленькой буквы «z» и числа от 0 до 9. + означает совпадение 1 или более повторений. Следовательно, [a-z0-9]+ означает совпадение всех комбинаций от маленькой буквы "а" до маленькой буквы "z" и чисел от 0 до 9, повторяющихся один или более раз.
[\._] означает соответствие '.' (точка) и ? означает найти 0 или 1 повторение. Поскольку мы не допускаем более одной точки подряд в адресе электронной почты, поэтому [\._]? означает, что он должен соответствовать нулю или одному вхождению точки.
У нас есть еще один [a-z0-9]+, чтобы найти другую комбинацию от маленькой 'a' до маленькой 'z' и чисел от 0 до 9, повторяющихся один или более раз, которая может быть или не быть преемником точка.
[@] означает соответствие @, а \w означает соответствие любому буквенно-цифровому символу, т. е. [@]\w+ означает соответствие @, за которым следует любой буквенно-цифровой символ, повторяющийся один или более раз
[.]\w{2,3} означает соответствие точке, за которой следует любая буквенно-цифровая комбинация символов длины 2 или 3. Это используется для сопоставления доменных имен длиной 2 и 3. Если вы хотите проверить личный домен имена, поэтому вы можете заменить это на \w+.
$ означает совпадение с концом строки, т. е. $ означает конец последовательности проверки.
Вывод программы будет заключаться в том, что «praveen@c-sharpcorner.com» считается недействительным, а «rohit.gupta@mcnsolutions.net» и «inform2atul@gmail.com» считаются действительными.
 
"praveen@c-sharpcorner.com" считается недействительным из-за "-" после "@". 
 
Если вы хотите, чтобы такие электронные письма считались действительными, вам нужно изменить регулярное выражение на "^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[ -]?\w+[.]\w{2,3}$". Вы можете видеть, что я добавил  +[-]?\w .
 
Вы можете создавать свои собственные последовательности, такие как "^[az]([w-]*[az]|[w-.]*[az]{2,}|[az])*@[az]([w-] *[az]|[w-.]*[az]{2,}|[az]){4,}?.[az]{2,}$". Я не буду объяснять это регулярное выражение, это ваша задача расшифровать и понять, что означает это регулярное выражение.


